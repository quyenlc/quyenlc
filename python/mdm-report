#!/usr/bin/python
import os
import sys
import logging
import argparse
import httplib2
import re
from apiclient import discovery
from oauth2client import tools
from EmailNotification import EmailNotification
from Infra import Gauth, pmail, loadDict

try:
    import argparse
    parser = argparse.ArgumentParser(prog='mdm-report', description='Make report on MDM enrolled devices with request list', parents=[tools.argparser])
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    parser.add_argument('-d', '--debug', action='store_true', help='Enable debug mode')
    flags = parser.parse_args()
except ImportError:
    flags = None
args = vars(flags)

mode = 'prod'
if args['debug']:
    mode = 'debug'

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets.readonly',
    'https://www.googleapis.com/auth/admin.directory.device.mobile.readonly',
    ]
configurations = loadDict('config/config.mdm-report.json')
credential_file = os.path.join('.credentials', 'credential-mdm-report.json')
credentials = Gauth(SCOPES, flags, credential_file = credential_file)
http = credentials.authorize(httplib2.Http())

def get_approved_list():
    """Sheets doc: https://developers.google.com/resources/api-libraries/documentation/sheets/v4/python/latest/sheets_v4.spreadsheets.html"""
    discoveryUrl = ('https://sheets.googleapis.com/$discovery/rest?'
                    'version=v4')
    service = discovery.build('sheets', 'v4', http=http, discoveryServiceUrl=discoveryUrl)

    spreadsheetId = '11PCG8tQUrJUOVdCSGhk0ZvbVnm2DR0Z_if3dHv65FX4'
    rangeName = 'Requests!B2:K'
    result = service.spreadsheets().values().get(spreadsheetId=spreadsheetId, range=rangeName).execute()
    values = result.get('values', [])

    approved_list = {}

    if not values:
        return None
    else:
        for row in values:
            if 'mdm_shared@punch.vn' in row[1] or 'Approved' != row[9]:
                continue
            else:
                if row[1] in approved_list:
                    approved_list[row[1]].append([row[5], row[6], row[7]])
                else:
                    approved_list[row[1]] = [[row[5], row[6], row[7]]]
    return approved_list

def get_enrolled_list():
    exceptions = [
    ]
    enrolled_list = {}
    service = discovery.build('admin', 'directory_v1', http=http)

    """MDM Docs: https://developers.google.com/resources/api-libraries/documentation/admin/directory_v1/python/latest/index.html"""
    results = service.mobiledevices().list(customerId='my_customer', orderBy='email', projection='BASIC', maxResults=200).execute()
    for device in results['mobiledevices']:
        if 'mdm_shared@punch.vn' in device['email'] or device['status'] in ['UNPROVISIONED', 'PENDING'] or device['email'][0] in exceptions:
            continue
        else:
            if device['email'][0] in enrolled_list:
                enrolled_list[device['email'][0]].append([device['deviceId'], device['serialNumber'], device['wifiMacAddress'], device['imei'], device['model'], device['os'], device['firstSync'], device['lastSync'], device['status']])
            else:
                enrolled_list[device['email'][0]] = [[device['deviceId'], device['serialNumber'], device['wifiMacAddress'] , device['imei'], device['model'], device['os'], device['firstSync'], device['lastSync'], device['status']]]
    if len(enrolled_list) == 0:
        return None
    else:
        return enrolled_list

def validate(enrolled_device, approved_device):
    try:
        serial_number = enrolled_device[1]
        wifi_mac_address = enrolled_device[2]
        imei = enrolled_device[3]
    except IndexError as e:
        print(str(e))
        return False
    if serial_number.lower().replace(" ", "") == approved_device[0].lower().replace(" ", ""):
        return True
    if wifi_mac_address.lower().replace(" ", "") == approved_device[2].lower().replace(" ", ""):
        return True
    if imei.lower().replace(" ", "") == approved_device[1].lower().replace(" ", ""):
        return True
    return False

enrolled_devices = get_enrolled_list()
approved_list = get_approved_list()

unapproved_devices = []
for email in enrolled_devices:

    user_devices = enrolled_devices[email]
    if not email in approved_list:
        for device in user_devices:
            
            device.append(email)
            unapproved_devices.append(device)
    else:
        approved_user_devices = approved_list[email]
        for device in user_devices:
            
            is_valid = False
            for approved_device in approved_user_devices:
                if validate(device, approved_device):
                    is_valid = True
                    break
            if not is_valid:
                device.append(email)
                unapproved_devices.append(device)

email_list = [{
    "emails": [
        configurations[mode]['receiver']['email']
    ],
    "subject": "[infosec] Report on unapproved devices on MDM",
    "data" : { 
        "receiver": configurations[mode]['receiver']['name'],
        "msg": "Please doublecheck and remove these unapproved devices on MDM.",
        "unapproved_devices": unapproved_devices
    }
}]

template = 'mdm-report'
pmail(email_list, template)









